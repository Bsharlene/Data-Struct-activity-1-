
import java.util.Scanner;

public class ArrayMenu {
    static Scanner sc = new Scanner(System.in);
    static int[] array;
    static int count = 0;

    public static void main(String[] args) {
        System.out.print("Enter initial length of the array: ");
        int length = sc.nextInt();
        array = new int[length];

        while (true) {
            System.out.println("\nMENU");
            System.out.println("1. Add an item");
            System.out.println("2. Delete an item");
            System.out.println("3. Search an item");
            System.out.println("4. Display all items");
            System.out.println("5. Sort Array");
            System.out.println("6. Exit");

            System.out.print("Choose an option: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1: addItem(); break;
                case 2: deleteItem(); break;
                case 3: searchItem(); break;
                case 4: displayItem(); break;
                case 5: sortArr(); break;
                case 6: exitProgram(); break;
                default: System.out.println("Invalid input. Please try again.");
            }
        }
    }

    public static void addItem() {
        System.out.print("Enter a number to add to the array: ");
        int val = sc.nextInt();

        if (count == array.length) {
            int newLength = array.length * 2;
            int[] newArray = new int[newLength];
            for (int i = 0; i < array.length; i++) {
                newArray[i] = array[i];
            }
            array = newArray;
            System.out.println("Array resized to length " + newLength);
        }

        array[count] = val;
        count++;
        System.out.println(val + " added to array.");
    }

    public static void deleteItem() {
        if (count == 0) {
            System.out.println("Array is empty.");
            return;
        }

        System.out.print("Enter value to delete: ");
        int val = sc.nextInt();
        int index = -1;
        for (int i = 0; i < count; i++) {
            if (array[i] == val) {
                index = i;
                break;
            }
        }

        if (index != -1) {
            for (int i = index; i < count - 1; i++) {
                array[i] = array[i + 1];
            }
            count--;
            System.out.println(val + " deleted from array.");
        } else {
            System.out.println("Value not found.");
        }
    }

    public static void searchItem() {
        if (count == 0) {
            System.out.println("Array is empty.");
            return;
        }

        System.out.print("Enter value to search: ");
        int val = sc.nextInt();

        boolean found = false;
        System.out.print("Found at position(s): ");
        for (int i = 0; i < count; i++) {
            if (array[i] == val) {
                System.out.print((i + 1) + " ");
                found = true;
            }
        }

        if (!found) {
            System.out.println("Value not found.");
        } else {
            System.out.println();
        }
    }

    public static void displayItem() {
        if (count == 0) {
            System.out.println("Array is empty.");
            return;
        }

        System.out.println("Array contents:");
        for (int i = 0; i < count; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    public static void sortArr() {
        if (count == 0) {
            System.out.println("Array is empty.");
            return;
        }

        System.out.println("Choose a sorting algorithm:");
        System.out.println("A. Quick Sort");
        System.out.println("B. Bubble Sort");
        System.out.println("C. Merge Sort");
        System.out.println("D. Selection Sort");
        System.out.println("E. Insertion Sort");
        System.out.print("Enter choice (A-E): ");
        char option = sc.next().toUpperCase().charAt(0);

        switch (option) {
            case 'A':
                quickSort(array, 0, count - 1);
                System.out.println("Sorted using Quick Sort.");
                break;
            case 'B':
                bubbleSort(array, count);
                System.out.println("Sorted using Bubble Sort.");
                break;
            case 'C':
                mergeSort(array, 0, count - 1);
                System.out.println("Sorted using Merge Sort.");
                break;
            case 'D':
                selectionSort(array, count);
                System.out.println("Sorted using Selection Sort.");
                break;
            case 'E':
                insertionSort(array, count);
                System.out.println("Sorted using Insertion Sort.");
                break;
            default:
                System.out.println("Invalid choice. Sorting cancelled.");
        }
    }

    // sorting algo

    public static void bubbleSort(int[] arr, int n) {
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // swap
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    public static void selectionSort(int[] arr, int n) {
        for (int i = 0; i < n - 1; i++) {
            int min = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[min]) {
                    min = j;
                }
            }
            // Swap
            int temp = arr[min];
            arr[min] = arr[i];
            arr[i] = temp;
        }
    }

    public static void insertionSort(int[] arr, int n) {
        for (int i = 1; i < n; i++) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1; // Index of smaller element
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                // Swap
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap pivot
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }

    public static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i < n1; ++i)
            L[i] = arr[left + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[mid + 1 + j];

        int i = 0, j = 0, k = left;

        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k++] = L[i++];
            } else {
                arr[k++] = R[j++];
            }
        }

        while (i < n1) {
            arr[k++] = L[i++];
        }

        while (j < n2) {
            arr[k++] = R[j++];
        }
    }

    public static void exitProgram() {
        System.out.println("Exiting Program...");
        sc.close();
        System.exit(0);
    }
}




